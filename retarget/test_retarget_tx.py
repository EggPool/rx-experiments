"""
Testbed for target adjustment
(c) 2019 - Yadacoin
(c) 2019 - EggdraSyl
"""
import json
import re
import matplotlib.pyplot as plt
from math import log

from mockup import Blockchain  # , Block
from minersimulator import MinerSimulator


class TestCase(object):

    def __init__(
        self,
        blockchain,
        retarget_period,
        min_seconds,
        max_seconds,
        block_durations,
        **kwargs
    ):
        self.blockchain = blockchain
        self.fill = '0000000000000000000000000000000000000000000000000000000000000000'
        self.retarget_period = retarget_period  # blocks = 1 day at 10 min per block
        self.min_seconds = min_seconds
        self.max_seconds = max_seconds
        self.block_durations = block_durations

    def get_target(
        self,
        height,
        last_block,
        block,
        verbose=False
    ):
        """First method, adjusted, but not working - takes eons to really adjust when hash drops."""
        max_target = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        retarget_period = self.retarget_period
        block_from_retarget_period_ago = self.blockchain.blocks[height - retarget_period]
        retarget_period_ago_time = block_from_retarget_period_ago["time"]
        elapsed_time_from_retarget_period_ago = int(block["time"]) - int(retarget_period_ago_time)  # take current time into account
        if elapsed_time_from_retarget_period_ago > (self.max_seconds * self.retarget_period):
            time_for_target = self.max_seconds
            which_max = self.min_seconds
        elif elapsed_time_from_retarget_period_ago < (self.min_seconds * self.retarget_period):
            time_for_target = self.min_seconds
            which_max = self.max_seconds
        else:
            time_for_target = int(elapsed_time_from_retarget_period_ago)
            which_max = self.max_seconds
        if verbose:
            print("Which max", which_max)
        start_index = last_block["height"]  # .index
        hash_sum = 0
        for i in range(start_index, start_index - retarget_period, -1):
            hash_sum += int(self.blockchain.blocks[i]["target"], 16)
        block_to_check_target = hash_sum / retarget_period
        if verbose:
            print(time_for_target, which_max)
        target = int((time_for_target * block_to_check_target) / which_max)
        if target is 0:
            target = 1
            block["special_min"] = False
        if target > max_target:
            target = max_target
        return (self.fill + "{:02x}".format(target))[-len(self.fill):]

    def get_target_5min(
        self,
        height,
        last_block,  # This is the latest on chain block we have in db
        block,  # This is the block we are currently mining, not on chain yet, with current time in it.
        verbose=False
    ):
        # Aim at 5 min average block time, with escape hatch
        max_target = 0x0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff  # A single cpu does that under a minute.
        retarget_period = 12 * 4  # 4 hours at 5 min per block - needs to be high enough to account for organic variance of the miners
        retarget_period2 = 12 * 1  # 1 hour at 5 min per block - Faster reaction to drops in blocktime, we want to make "instamine" harder
        target_time = 5 * 60  # 5 min
        # That should not happen
        if block["time"] - last_block["time"] > 3600:
            print("Should not happen - Often")
            return MinerSimulator.HEX(max_target)
        # decrease after 2x target - can be 3 as well
        current_block_time = block["time"] - last_block["time"]
        adjusted = False
        if current_block_time > 2 * target_time:
            latest_target = last_block["target"]
            delta = max_target - int(latest_target, 16)
            # Linear decrease to reach max target after one hour block time.
            new_target = int(int(latest_target, 16) + delta * current_block_time / 3600)
            # print("adjust", current_block_time, MinerSimulator.HEX(new_target), latest_target)
            adjusted = new_target
            # To be used later on, once the rest is calc'd

        block_from_retarget_period_ago = self.blockchain.blocks[-retarget_period]
        retarget_period_ago_time = block_from_retarget_period_ago["time"]
        elapsed_time_from_retarget_period_ago = int(block["time"]) - int(retarget_period_ago_time)
        average_block_time = elapsed_time_from_retarget_period_ago / retarget_period

        block_from_retarget_period2_ago = self.blockchain.blocks[-retarget_period2]
        retarget_period2_ago_time = block_from_retarget_period2_ago["time"]
        elapsed_time_from_retarget_period2_ago = int(block["time"]) - int(retarget_period2_ago_time)
        average_block_time2 = elapsed_time_from_retarget_period2_ago / retarget_period2

        start_index = last_block["height"]  # .index
        # React faster to a drop in block time than to a raise. short block times are more a threat than large ones.
        if average_block_time2 < target_time:
            hash_sum2 = 0
            for i in range(start_index, start_index - retarget_period2, -1):
                hash_sum2 += int(self.blockchain.blocks[i]["target"], 16)
            average_target = hash_sum2 / retarget_period2
            target = int(average_target * average_block_time2 / target_time)
        else:
            hash_sum = 0
            for i in range(start_index, start_index - retarget_period, -1):
                hash_sum += int(self.blockchain.blocks[i]["target"], 16)
            average_target = hash_sum / retarget_period
            # This adjusts both ways
            target = int(average_target * average_block_time / target_time)
        if adjusted:
            # Take min of calc and adjusted
            if adjusted > target:
                target = adjusted
        if verbose:
            print("average block time", average_block_time)
            print("average target", MinerSimulator.HEX(int(average_target)), "target", MinerSimulator.HEX(target) )
        if target < 1:
            target = 1
            block["special_min"] = False
        block["average_block_time"] = average_block_time
        if target > max_target:
            target = max_target
        return (self.fill + "{:02x}".format(target))[-len(self.fill):]

    def test_case_duration(self):
        prev_time = self.blockchain.blocks[-1]["time"]
        for i, block_duration in enumerate(self.block_durations):
            height = self.blockchain.blocks[-1]["height"] + 1
            block = {
                "time": prev_time + block_duration,
                "height": height,
                "special_min": True if block_duration > self.max_seconds else False,
                "block_time": block_duration
            }
            prev_time = block["time"]
            latest_block = self.blockchain.blocks[-1]
            last_block = self.blockchain.blocks[-2]
            target = self.get_target(
                latest_block["height"],
                last_block,
                block
            )
            block["target"] = target
            self.blockchain.blocks.append(block)

    def test_case_duration_5min(self):
        prev_time = self.blockchain.blocks[-1]["time"]
        for i, block_duration in enumerate(self.block_durations):
            height = self.blockchain.blocks[-1]["height"] + 1
            block = {
                "time": prev_time + block_duration,
                "height": height,
                "special_min": True if block_duration > self.max_seconds else False,
                "block_time": block_duration
            }
            prev_time = block["time"]
            latest_block = self.blockchain.blocks[-1]
            last_block = self.blockchain.blocks[-2]
            target = self.get_target_5min(
                latest_block["height"],
                last_block,
                block
            )
            block["target"] = target
            self.blockchain.blocks.append(block)

    def test_case_hashrate(self, file_name: str):
        with open(file_name) as fp:
            hashes = json.load(fp)  # One hash per min.
        time = self.blockchain.blocks[-1]["time"]
        latest_block = self.blockchain.blocks[-1]
        height = latest_block["height"] + 1
        block_duration = 0
        block = {
            "time": time,
            "height": height,
            "special_min": True if block_duration > self.max_seconds else False,
            "block_time": block_duration
        }
        target = self.get_target_5min(
            latest_block["height"],
            latest_block,
            block,
            verbose=False
        )
        for data in hashes:
            # Each data is one minute. hashrate (for graph only, not used in calc) then lower hash found that minute - depends on the given HR
            hr, hash = data
            # print("target", target, "Hash", hash, "dur",  time - latest_block["time"])
            height = latest_block["height"] + 1
            block_duration = time - latest_block["time"]
            block = {
                "time": time,
                "height": height,
                "special_min": True if block_duration > self.max_seconds else False,
                "block_time": block_duration,
                "hash_rate": hr
            }
            latest_block = self.blockchain.blocks[-1]
            target = self.get_target_5min(
                latest_block["height"],
                latest_block,
                block,
                verbose=False
            )
            if hash < target:
                # print("Got block")
                block["target"] = target
                self.blockchain.blocks.append(block)

            time += 60


fixtures_duration = [
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 2016,
    #     'min_seconds': 300,
    #     'max_seconds': 3600,
    #     'block_durations': [
    #         6000,
    #         6000,
    #         3000,
    #         5000
    #     ],
    #     'linestyle': 'r'
    # },
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 2016,
    #     'min_seconds': 300,
    #     'max_seconds': 3600,
    #     'block_durations': [
    #         60,
    #         60,
    #         30,
    #         50
    #     ],
    #     'linestyle': 'ro'
    # },
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 2016,
    #     'min_seconds': 300,
    #     'max_seconds': 600,
    #     'block_durations': [
    #         6000,
    #         6000,
    #         3000,
    #         5000
    #     ],
    #     'linestyle': 'g'
    # },
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 2016,
    #     'min_seconds': 300,
    #     'max_seconds': 600,
    #     'block_durations': [
    #         60,
    #         60,
    #         30,
    #         50
    #     ],
    #     'linestyle': 'go'
    # },
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 25,
    #     'min_seconds': 300,
    #     'max_seconds': 3600,
    #     'block_durations': [
    #         6000,
    #         6000,
    #         3000,
    #         5000,
    #         6000,
    #         6000,
    #         3000,
    #         5000,
    #     ],
    #     'linestyle': 'b'
    # },
    {
        'blockchain': None,
        'retarget_period': 5,
        'min_seconds': 300,
        'max_seconds': 3600,
        'block_durations': [
            6000,
            6000,
            3000,
            5000,
            6000,
            6000,
            3000,
            5000,
            6000,
            6000,
            3000,
            5000,
            6000,
            6000,
            3000,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            3000,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            3000,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            3000,
            5000,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            50,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            50,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            50,
            5000,
            6000,
            3000,
            5000,
            6000,
            6000,
            60,
            30,
            50,
            60,
            60,
            30,
            50,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            5000,
            50,
            50,
            5000,
            50,
            50,
            5000,
            60,
            30,
            50,
            50,
            5000,
            60,
            30,
            50,
            50,
            5000,
            60,
            30,
            50,
            50,
            5000,
            50,
            5000,
            6000,
            3000,
            5000,
            50,
            5000,
            6000,
            3000,
            5000,
            50,
            5000,
            6000,
            3000,
            5000,
            50,
            5000,
            6000,
            3000,
            5000,
            50,
            5000,
            800,
            6000,
            3000,
            5000,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            800,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            1600,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            2500,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            3599,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            60,
            30,
            50,
            50,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            450000,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1800,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            1000,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
            900,
        ],
        'linestyle': 'b-'
    },
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 25,
    #     'min_seconds': 300,
    #     'max_seconds': 600,
    #     'block_durations': [
    #         60,
    #         60,
    #         30,
    #         50,
    #         60,
    #         60,
    #         30,
    #         50,
    #     ],
    #     'linestyle': 'y'
    # },
    # {
    #     'blockchain': blockchain,
    #     'retarget_period': 25,
    #     'min_seconds': 300,
    #     'max_seconds': 600,
    #     'block_durations': [
    #         6000,
    #         6000,
    #         3000,
    #         5000,
    #         6000,
    #         6000,
    #         3000,
    #         5000,
    #     ],
    #     'linestyle': 'yo'
    # },
]

p = re.compile('^[0]+')
args = []
for fixture in fixtures_duration:

    x = []
    y = []
    y2 = []
    y3 = []
    yh = []
    tc = TestCase(**fixture)
    #tc.blockchain = Blockchain.from_file("data/init/stable_300_6.json")
    tc.blockchain = Blockchain.from_file("data/init/stable_300_4.json")
    # tc.test_case_duration()
    # tc.test_case_duration_5min()
    #tc.test_case_hashrate("data/live/stable_167.json")
    #tc.test_case_hashrate("data/live/step_up_167_500.json")
    tc.test_case_hashrate("data/live/step_down_500_167.json")
    #tc.test_case_hashrate("data/live/sinus_300_100_2880.json")
    #tc.test_case_hashrate("data/live/arithmetic_167_16.json")
    for i, block in enumerate(tc.blockchain.blocks[950:]):  # keep 50 stable blocks at start
        #x.append(block["height"])
        x.append(int(block["time"]/60))
        try:
            # y.append(len(p.match(block["target"]).group()))
            y.append(log(int(block["target"], 16)))
        except Exception as e:
            y.append(0)
        y2.append(block["block_time"])
        y3.append(block.get("average_block_time", 300))
        yh.append(block.get("hash_rate", 0))

print("Plotting")
fig, ax1 = plt.subplots()

color = 'tab:red'
#ax1.set_xlabel('block#')
ax1.set_xlabel('Minutes')
ax1.set_ylabel('Hash Rate', color=color)
ax1.plot(x, yh, color=color)
ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
color = 'tab:blue'
ax2.set_ylabel('block_time', color=color)  # we already handled the x-label with ax1
ax2.plot(x, y2, color=color, )
ax2.plot(x, y3, color='tab:orange')
ax2.tick_params(axis='y', labelcolor=color)

if False:
    # log(target)
    ax3 = ax1.twinx()
    color = 'tab:green'
    ax3.set_ylabel('\nlog(target)', color=color)
    ax3.plot(x, y, color=color, )
    # ax3.tick_params(axis='y', labelcolor=color)

fig.tight_layout()
plt.show()
